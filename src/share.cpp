#include <Arduino.h>
#include "../include/share.h"


void WalletInfo::setName(uint8_t *arr, uint8_t len){
    memcpy(name, arr, len);
    nameLength=len;
}

uint8_t WalletInfo::getName(uint8_t *arr) {
    memcpy(arr, name, nameLength);
    return nameLength;
}

void WalletInfo::setPassHash(uint8_t *arr, uint8_t len){
    memcpy(passHash, arr, len);
}

void WalletInfo::setPassDoubleHash(uint8_t *arr, uint8_t len){
    memcpy(passDoubleHash, arr, len);
}

uint8_t WalletInfo::getPassDoubleHash(uint8_t *arr) {
    memcpy(arr, passDoubleHash, passSize);
    return passSize;
}

void Packet::setxCor(uint8_t value){
    xcoordinate=value;
}

uint8_t Packet::getxCor(){
    return xcoordinate;
}

void Packet::setShare(uint8_t *arr, uint8_t len){
    memcpy(share, arr, len);
}

uint8_t Packet::getShare(uint8_t *arr){
    memcpy(arr, share, shareSize);
}

void Packet::setChecksum(uint8_t *arr, uint8_t len){
    memcpy(checksum, arr, len);
}

uint8_t Packet::getChecksum(uint8_t *arr){
    memcpy(arr, checksum, checksumSize);
}

void Packet::setNumberOfShare(uint8_t value) {
    numberOfShares = value;
}

void Packet::setTotalNumberofShare(uint8_t value){
    totalNumberOfShares = value;
}


/*****************************/
void WalletInfo::display(){
    /* Serial.println("Wallet Name : ");
    for(small i=0;i<nameSize;i++){
        Serial.println(this->name[i]);
    }
    Serial.println();
    Serial.println("Wallet Pass Hash : ");
    for(small i=0;i<passSize;i++){
        Serial.println(this->passwordHash[i]);
    }
    Serial.println("--------------------");*/
}


//TODO : fill constructor
Packet::Packet(){

}


/*void Share::share(small *walletName,small *walletPassword,small *share),{

}*/

/*
*Setter functions
*/
//set wallet name

/* void Packet::setWalletName(string walletName){
    for(int i=0;i<walletName.size();i++)
        this->walletName[i]=small(walletName[i]);
}
//set wallet password
void Packet::setWalletPassword(string walletPassword){
    for(int i=0;i<walletPassword.size();i++)
        this->walletPassword[i]=small(walletPassword[i]);
}*/
//set share
void Packet::setShare(small share[]){
    for(int i=0;i<33;i++)
        this->share[i]=int(share[i]);
}
//set xcoordinate
void Packet::setXcoordinate(small xcoordinate){
    this->xcoordinate=xcoordinate;
}

//set number of shares generated 
void Packet::setNumberOfShares(small numberOfShares){
    this->numberOfShares=numberOfShares;
}
//set total number of shares generated
void Packet::setTotalNumberOfShares(small totalNumberOfShares){
    this->totalNumberOfShares=totalNumberOfShares;
}

//set checksum
void Packet::setChecksum(small checksum[]){
    for(small i=0;i<4;i++)
        this->checksum[i]=checksum[i];
}
//set coefficients
void Packet::setCoefficients(small *coefficients)
{
    for(small i=0;i<this->totalNumberOfShares;i++)
        this->coefficients[i]=coefficients[i];
}
/*
*Getter functions
 */
//get xcoordiante
small Packet::getXcoordinate()
{
    return this->xcoordinate;
}
//get Coefficients
small *Packet::getCoefficients(){
    return coefficients;
}
//TODO : create getter fucntions

//fills in the coefficients with random number
void Packet::fillCoefficients()
{
    for(small i=0;i<totalNumberOfShares-1;i++)
        this->coefficients[i]=randomNumberGenerator();
}
/*
* FUNCTION : Create Shamir Secret
* fills in the values in the wallet with the stored values
 */
/* 
void Share::createShamirShare(){    
    small byteCount=0;
    for(small i=0;i<10;i++,byteCount++)
        this->shamirShare[byteCount]=walletName[i];
    for(small i=0;i<32;i++,byteCount++)
        this->shamirShare[byteCount]=walletPassword[i];
    for(small i=0;i<10;i++,byteCount++)
        this->shamirShare[byteCount]=share[i];
    this->shamirShare[byteCount++]=xcoordinate;
    this->shamirShare[byteCount++]=numberOfShares;
    this->shamirShare[byteCount++]=totalNumberOfShares;
    for(small i=0;i<4;i++,byteCount++)
        this->shamirShare[byteCount]=checksum[i];
}
*/

//convert the coefficients into ax^n-1 + bx^n-2 + ... + share[i]
// thus each 
void Packet::convertCoefficients()
{
    this->equation=0;
    for(small i=0;i<numberOfShares-1;i++)
    {
        coefficients[i]=multiply(coefficients[i],power(xcoordinate,numberOfShares-1-i));
        equation=add(equation,coefficients[i]);
    }
}

//Shares generated by adding the "mnemonic byte" to the converted equation
void Packet::convertToShare()
{
    for(small i=0;i<32;i++)
            this->share[i]=add(this->share[i],equation);
}

//get the power of a "number" to "N"
small Packet::power(small number,small N)
{   
    small answer=number;
    for(small i=1;i<N;i++)
        answer=multiply(answer,number);
    return answer;
}

//displays the packet
void Packet::displayPacket(){
    Serial.println("Share : ");
    for(small i=0;i<32;i++){
        Serial.println(this->share[i]);
    }
    Serial.println();
    Serial.println("X coordinate : ");
    Serial.println(this->xcoordinate);

    Serial.println();
    Serial.println("Scheme : ");

    Serial.println("");
    Serial.println(numberOfShares + "/" + totalNumberOfShares);

    Serial.println();
    /*for(small i=0;i<4;i++){
        this->walletInfo[i].display();
    }*/
}
